<?php
	/**
	 * @package name <removeString> this must change
	 * @congif extract areas from lis-db
	 * @extract areas,flotas and tipo de Operacion
	 * @use isql model connection with mssql
	 * @param=>arrayString <array | string>
	 * @param=>string <array | string>
	 * @param=>$model <name of the model|1stlevet array>
	 * @param=>field <name of the table|2nd level array>
	 * @param=>unset <bool if you want remove the first pointer>
	 * NOTE  array('model'=>array('field','value'));
	 */

	/**
	 * @package name <setNameDefinitions> set languaje of the app
	 * @use edit as you need
	 * 
	 */
	// some title in root modal alert 
		
		function languaje($langChart=null) {
			$lang = array('en','es','jp','ru','it','fr');//examples
				// set the default Languaje
				if(empty($langChart) OR !isset($langChart)){
					$langChart = 'en';
				}
				if($langChart === 'es') {
					$languaje = array (
									'landingPage'=>'Inicio',
									'landingPageTitleA'=>'Grupo Servicios de Transporte',
									'landingPageBodyA'=>'Politicas',
									'landingPageLinkA'=>'Mas ...',
									'landingPageTitleB'=>'Transportes Bonampak',
									'landingPageBodyB'=>'Politicas',
									'landingPageLinkB'=>'Mas ...',
									'landingPageTitleC'=>'Transportadora Especializada Industrial',
									'landingPageBodyC'=>'Politicas',
									'landingPageLinkC'=>'Mas ...',
									'landingPageTitleD'=>'Autotransporte Macuspana',
									'landingPageBodyD'=>'Politicas',
									'landingPageLinkD'=>'Mas ...',
									'welcomeMsg' => array('M'=>'Bienvenido'."\x20",'F'=>'Bienvenida'."\x20",'R'=>'Hola Sr Robot'."\x20"), // hex=42 69 65 6e 76 65 6e 69 64 6f //01000010 01101001 01100101 01101110 01110110 01100101 01101110 01101001 01100100 01101111
									'guestWelcomeMsg'=>'Hola'."\x20",
									'guestUser' => 'Invitado',
									'appName'=>'Portal GST',
									'rootModalTitle' => 'Titulo',
									'rootModalMessage' => 'Mensaje',
									'rootModalButton' => 'Cerrar',
									'loginTitle' => 'Inicio de Sesi&oacute;n',
									'loginUser'=> 'Numero de Trabajador',
									'loginPassword'=>'ContraseÃ±a',
									'loginButton'=>'Ingresar',
									'navMenuA'=>'Usuarios',
									'navMenuB'=>'Grupos',
									'navMenuC'=>'Politicas',
									'navMenuD'=>'Descargas',
									'navMenuE'=>'Salir',
									'navMenuF'=>'Anexos de las Politicas',
									'navMenuG'=>'Manuales'
					);

				} else if($langChart === 'en') {
					$languaje = array (
									'landingPage'=>'Home',
									'landingPageTitleA'=>'IT Department',
									'landingPageBodyA'=>'Policies',
									'landingPageLinkA'=>'More ...',
									'landingPageTitleB'=>'R.R.H.H',
									'landingPageBodyB'=>'Policies',
									'landingPageLinkB'=>'More ...',
									'landingPageTitleC'=>'Finance',
									'landingPageBodyC'=>'Policies',
									'landingPageLinkC'=>'More ...',
									'landingPageTitleD'=>'Logistic',
									'landingPageBodyD'=>'Policies',
									'landingPageLinkD'=>'More ...',
									'welcomeMsg' => array('M'=>'Welcome'."\x20",'F'=>'Welcome'."\x20",'R'=>'Hello Mr Roboto'."\x20"),
									'guestWelcomeMsg'=>'Hello'."\x20",
									'guestUser' => 'Guest',
									'appName'=>'Home',
									'rootModalTitle' => 'Title',
									'rootModalMessage' => 'Message',
									'rootModalButton' => 'Close',
									'loginTitle' => 'Sig in',
									'loginUser' => 'Username or e-mail',
									'loginPassword' => 'Password',
									'loginButton'=>'Login',
									'navMenuA'=>'Users',
									'navMenuB'=>'Groups',
									'navMenuC'=>'Policies',
									'navMenuD'=>'Downloads',
									'navMenuE'=>'Logout',
									'navMenuF'=>'PoliciesAnexos',
									'navMenuG'=>'Manuals'
						);
				}
			
			return $languaje;
		}
	/**
	 * @package name <removeString> this must change
	 * @congif extract areas from lis-db
	 * @extract areas,flotas and tipo de Operacion
	 * @use isql model connection with mssql
	 * @param=>arrayString <array | string>
	 * @param=>string <array | string>
	 * @param=>$model <name of the model|1stlevet array>
	 * @param=>field <name of the table|2nd level array>
	 * @param=>unset <bool if you want remove the first pointer>
	 * NOTE  array('model'=>array('field','value'));
	 */
	
	function imgPaths($appName=null) {
		$apps = array('gst','kml','portal','radiobases');//examples
		if ($appName === 'gst') {
			$imgPaths = array(
								'landingImgBg'=> $appName.DS.'bg.png',
								'landingImgA' => $appName.DS.'gst.png',
								'landingImgB' => $appName.DS.'tbk.png',
								'landingImgC' => $appName.DS.'tei.png',
								'landingImgD' => $appName.DS.'atm.png',
								'landingHeaderIcon' => $appName.DS.'backup'.DS.'gst.png'
			);
		} else if ($appName === 'portal') {
			$imgPaths = array(
								'landingImgBg'=> $appName.DS.'bg.jpg',
								'landingImgA' => $appName.DS.'cool-wood.jpg',
								'landingImgB' => $appName.DS.'dice-black.jpg',
								'landingImgC' => $appName.DS.'black-&-red.jpg',
								'landingImgD' => $appName.DS.'background_div_2.png',
								'landingHeaderIcon' => $appName.DS.'backup'.DS.'gst.png'
			);
		}
		return $imgPaths;
	}
	/**
	 * @package name <checkAdmin>
	 * @definition checks the level-group of the user 
	 * @usage isql model connection with mssql
	 * @param=>arrayString <array | string>
	 * @param=>string <array | string>
	 * @param=>$model <name of the model|1stlevet array>
	 * @param=>field <name of the table|2nd level array>
	 * @param=>unset <bool if you want remove the first pointer>
	 * NOTE  array('model'=>array('field','value'));
	 */
	function checkAdmin ($id_group=null) {
		
		  if($id_group === '1' OR $id_group === '7' ) {
			return true;
		} else {
			return false;
		}
	}
	


	/**
	 * @package name <checkUser>
	 * @definition checks the level-group of the user 
	 * @usage isql model connection with mssql
	 * @param=>arrayString <array | string>
	 * @param=>string <array | string>
	 * @param=>$model <name of the model|1stlevet array>
	 * @param=>field <name of the table|2nd level array>
	 * @param=>unset <bool if you want remove the first pointer>
	 * NOTE  array('model'=>array('field','value'));
	 */
	function checkUser ($id_group=null,$group=null) {
		
		if ( ((int)$id_group === 8 OR (int)$id_group === 6 OR (int)$id_group === 1 OR (int)$id_group === 7) and $group === 'Casetas') {
			return true;
		} else if (( (int)$id_group === 5 OR (int)$id_group === 1  OR (int)$id_group === 7) and $group === 'PoliciesAnexos') {
			return true;
		} else if (( (int)$id_group === 4 OR (int)$id_group === 1  OR (int)$id_group === 7) and $group === 'Secure') {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * @package name <checkSuperUser>
	 * @definition checks the level-group of the user 
	 * @usage isql model connection with mssql
	 * @param=>arrayString <array | string>
	 * @param=>string <array | string>
	 * @param=>$model <name of the model|1stlevet array>
	 * @param=>field <name of the table|2nd level array>
	 * @param=>unset <bool if you want remove the first pointer>
	 * NOTE  array('model'=>array('field','value'));
	 */
	function checkSuperUser ($id_group=null,$number_id=null,$superUser=null) {
		
		$root=array('9000000','9000002','4000003');
// 		var_dump(in_array($number_id,$root));
// 		var_dump((int)$id_group);
// 		var_dump((bool)$superUser);
		  if(((int)$id_group === 1 OR (int)$id_group === 7) and (bool)$superUser === true  and in_array($number_id,$root) === true ) {
			return true;
		} else {
			return false;
		}
	}
	
	 /**
	 * @package name <checkBrowser> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | set the string of "HTTP_USER_AGENT" >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
		
	function checkBrowser($userAgent=null,$userAgentHaystack=null,$crop=null){
		
		if($userAgentHaystack === true){
			$userAgentHaystack = array('Firefox','Trident','konqueror','Presto','Chrome','Apple','Webkit','w3m');
		}else{
			$userAgentHaystack = array('Firefox','Trident','konqueror');
		}
// 		var_dump($_SERVER['HTTP_USER_AGENT']);
// 	  $browser = null;
		foreach($userAgentHaystack as $idx => $stack){
		  $agentFound = strpos($userAgent, $stack);
		  if(strpos($userAgent, $stack) !== false){

			if (!empty($crop)) {
				return $stack;
				break;
			}else {
				return true;
				break;
			}

		  }
		}
		
		return false;
	}//End of checkBrowser
	
	 /**
	 * @package name <htmlMotor> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | set the string of "HTTP_USER_AGENT" >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
		
	function htmlMotor () {
		$htmlMotor = array(
							'fa fa-chrome'=>'Chrome',
							'fa fa-firefox'=>'Firefox',
							'fa fa-internet-explorer'=>'Trident',
							'fa fa-opera'=>'Presto',
							'fa fa-terminal'=>'w3m',
							'fa fa-safari'=>'Safari'
		);
		return $htmlMotor;
	}
	
	 /**
	 * @package name <encrypt> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | set the string of "HTTP_USER_AGENT" >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
	function dEncrypt($decrypted_encrypt, $password, $salt , $mode) {
		
		if ($mode === 'encrypt') {
			
			$decrypted = $decrypted_encrypt;
			// Build a 256-bit $key which is a SHA256 hash of $salt and $password.
			$key = hash('SHA256', $salt . $password, true);
			// Build $iv and $iv_base64.  We use a block size of 128 bits (AES compliant) and CBC mode.  (Note: ECB mode is inadequate as IV is not used.)
			srand(); $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC), MCRYPT_RAND);
			if (strlen($iv_base64 = rtrim(base64_encode($iv), '=')) != 22) return false;
			// Encrypt $decrypted and an MD5 of $decrypted using $key.  MD5 is fine to use here because it's just to verify successful decryption.
			$encrypted = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $decrypted . md5($decrypted), MCRYPT_MODE_CBC, $iv));
			// We're done!
			return $iv_base64 . $encrypted;
		} else if ($mode === 'decrypt'){
			
			$encrypted = $decrypted_encrypt;
			// Build a 256-bit $key which is a SHA256 hash of $salt and $password.
			$key = hash('SHA256', $salt . $password, true);
			// Retrieve $iv which is the first 22 characters plus ==, base64_decoded.
			$iv = base64_decode(substr($encrypted, 0, 22) . '==');
			// Remove $iv from $encrypted.
			$encrypted = substr($encrypted, 22);
			// Decrypt the data.  rtrim won't corrupt the data because the last 32 characters are the md5 hash; thus any \0 character has to be padding.
			$decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, base64_decode($encrypted), MCRYPT_MODE_CBC, $iv), "\0\4");
			// Retrieve $hash which is the last 32 characters of $decrypted.
			$hash = substr($decrypted, -32);
			// Remove the last 32 characters from $decrypted.
			$decrypted = substr($decrypted, 0, -32);
			// Integrity check.  If this fails, either the data is corrupted, or the password/salt was incorrect.
			if (md5($decrypted) != $hash) return false;
			// Yay!
			return $decrypted;
		} else {
			return null;
		}
	}

	 /**
	 * @package name <removeBOM> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | When you read the file back in using fopen, the BOM will also be there. To remove it, I also wrote the following function: >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
	function removeBOM($str=""){
			if(substr($str, 0,3) == pack("CCC",0xef,0xbb,0xbf)) {
					$str=substr($str, 3);
			}
			return $str;
	}

	/**
	* @package name <negative> this must change
	* @congif build a script code to call datepicker
	* @usage
	* @param=>userAgent <integer | checks if a number is negative else return false: >
	* @return <BOOLEAN>
	* NOTE  this function is far away to be complete but for the purpose is ok
	*/
	function negative($data = null) {
		if(is_numeric($data)){
			return (min(1, max(-1, $data)) === -1) ?  TRUE : FALSE ;
		} else {
			return null;
		}
	}
	
	 /**
	 * @package name <map_utf8> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | convert an array to utf8  >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
	function map_utf8($results) {

		foreach ($results as $key => $value) {
				$result[utf8_encode($key)] = $value;
		}

		return $result;
	}
	
	 /**
	 * @package name <cp1252_to_utf8> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string |  Here's some code that addresses the issue that Steven describes in the previous comment; >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */

	function cp1252_to_utf8($str) {
		/* This structure encodes the difference between ISO-8859-1 and Windows-1252,
		as a map from the UTF-8 encoding of some ISO-8859-1 control characters to
		the UTF-8 encoding of the non-control characters that Windows-1252 places
		at the equivalent code points. */

		$cp1252_map = array(
			"\xc2\x80" => "\xe2\x82\xac", /* EURO SIGN */
			"\xc2\x82" => "\xe2\x80\x9a", /* SINGLE LOW-9 QUOTATION MARK */
			"\xc2\x83" => "\xc6\x92",     /* LATIN SMALL LETTER F WITH HOOK */
			"\xc2\x84" => "\xe2\x80\x9e", /* DOUBLE LOW-9 QUOTATION MARK */
			"\xc2\x85" => "\xe2\x80\xa6", /* HORIZONTAL ELLIPSIS */
			"\xc2\x86" => "\xe2\x80\xa0", /* DAGGER */
			"\xc2\x87" => "\xe2\x80\xa1", /* DOUBLE DAGGER */
			"\xc2\x88" => "\xcb\x86",     /* MODIFIER LETTER CIRCUMFLEX ACCENT */
			"\xc2\x89" => "\xe2\x80\xb0", /* PER MILLE SIGN */
			"\xc2\x8a" => "\xc5\xa0",     /* LATIN CAPITAL LETTER S WITH CARON */
			"\xc2\x8b" => "\xe2\x80\xb9", /* SINGLE LEFT-POINTING ANGLE QUOTATION */
			"\xc2\x8c" => "\xc5\x92",     /* LATIN CAPITAL LIGATURE OE */
			"\xc2\x8e" => "\xc5\xbd",     /* LATIN CAPITAL LETTER Z WITH CARON */
			"\xc2\x91" => "\xe2\x80\x98", /* LEFT SINGLE QUOTATION MARK */
			"\xc2\x92" => "\xe2\x80\x99", /* RIGHT SINGLE QUOTATION MARK */
			"\xc2\x93" => "\xe2\x80\x9c", /* LEFT DOUBLE QUOTATION MARK */
			"\xc2\x94" => "\xe2\x80\x9d", /* RIGHT DOUBLE QUOTATION MARK */
			"\xc2\x95" => "\xe2\x80\xa2", /* BULLET */
			"\xc2\x96" => "\xe2\x80\x93", /* EN DASH */
			"\xc2\x97" => "\xe2\x80\x94", /* EM DASH */

			"\xc2\x98" => "\xcb\x9c",     /* SMALL TILDE */
			"\xc2\x99" => "\xe2\x84\xa2", /* TRADE MARK SIGN */
			"\xc2\x9a" => "\xc5\xa1",     /* LATIN SMALL LETTER S WITH CARON */
			"\xc2\x9b" => "\xe2\x80\xba", /* SINGLE RIGHT-POINTING ANGLE QUOTATION*/
			"\xc2\x9c" => "\xc5\x93",     /* LATIN SMALL LIGATURE OE */
			"\xc2\x9e" => "\xc5\xbe",     /* LATIN SMALL LETTER Z WITH CARON */
			"\xc2\x9f" => "\xc5\xb8"      /* LATIN CAPITAL LETTER Y WITH DIAERESIS*/
		);
		
			return  strtr(utf8_encode($str), $cp1252_map);
	}
	
	/** NOTE <Define dirs>**/
	function createDirs() {
		return array(
						'1'=>'shares',
						'2'=>'Desktop',
						'3'=>'Documents'
			
		);
	}
	
	
	// ggarciaa at gmail dot com (04-July-2007 01:57)
	// I needed to empty a directory, but keeping it
	// so I slightly modified the contribution from
	// stefano at takys dot it (28-Dec-2005 11:57)
	// A short but powerfull recursive function
	// that works also if the dirs contain hidden files
	//
	// $dir = the target directory
	// $DeleteMe = if true delete also $dir, if false leave it alone

	function SureRemoveDir($dir, $DeleteMe) {
		if(!$dh = @opendir($dir)) return;
		while (false !== ($obj = readdir($dh))) {
			if($obj=='.' || $obj=='..') continue;
			if (!@unlink($dir.'/'.$obj)) SureRemoveDir($dir.'/'.$obj, true);
		}

		closedir($dh);
		if ($DeleteMe){
			@rmdir($dir);
		}
	}
	
	 /**
	 * @package name <GeraHash> this must change
	 * @congif build a script code to call datepicker
	 * @usage
	 * @param=>userAgent <string | set the string of "HTTP_USER_AGENT" >
	 * NOTE  this function is far away to be complete but for the purpose is ok
	 */
	 
	function GeraHash($qtd){
	//Under the string $Caracteres you write all the characters you want to be used to randomly generate the code.
	$Caracteres = 'ABCDEFGHIJKLMOPQRSTUVXWYZ0123456789';
	$QuantidadeCaracteres = strlen($Caracteres);
	$QuantidadeCaracteres--;

	$Hash=NULL;
		for($x=1;$x<=$qtd;$x++){
			$Posicao = rand(0,$QuantidadeCaracteres);
			$Hash .= substr($Caracteres,$Posicao,1);
		}

	return $Hash;
	} 
	/**
	* Replace language-specific characters by ASCII-equivalents.
	* @param string $s
	* @return string
	*/
	function normalizeChars($string) {
		$replace = array(
			'Ñ'=>'-', 'Ð¬'=>'-', 'Ðª'=>'-', 'Ñ'=>'-',
			'Ä'=>'A', 'Ä'=>'A', 'Ã'=>'A', 'Ã'=>'A', 'Ã'=>'A', 'Ã'=>'A', 'Ã'=>'A', 'Ã'=>'A', 'Ã'=>'Ae',
			'Ã'=>'B',
			'Ä'=>'C', '×¥'=>'C', 'Ã'=>'C',
			'Ã'=>'E', 'Ä'=>'E', 'Ã'=>'E', 'Ã'=>'E', 'Ã'=>'E',
			'Ä'=>'G',
			'Ä°'=>'I', 'Ã'=>'I', 'Ã'=>'I', 'Ã'=>'I', 'Ã'=>'I',
			'Å'=>'L',
			'Ã'=>'N', 'Å'=>'N',
			'Ã'=>'O', 'Ã'=>'O', 'Ã'=>'O', 'Ã'=>'O', 'Ã'=>'O', 'Ã'=>'Oe',
			'Å'=>'S', 'Å'=>'S', 'È'=>'S', 'Å '=>'S',
			'È'=>'T',
			'Ã'=>'U', 'Ã'=>'U', 'Ã'=>'U', 'Ã'=>'Ue',
			'Ã'=>'Y',
			'Å¹'=>'Z', 'Å½'=>'Z', 'Å»'=>'Z',
			'Ã¢'=>'a', 'Ç'=>'a', 'Ä'=>'a', 'Ã¡'=>'a', 'Ä'=>'a', 'Ã£'=>'a', 'Ç'=>'a', 'Ð°'=>'a', 'Ð'=>'a', 'Ã¥'=>'a', 'Ã '=>'a', '×'=>'a', 'Çº'=>'a', 'Ä'=>'a', 'Ç»'=>'a', 'Ä'=>'a', 'Ã¤'=>'ae', 'Ã¦'=>'ae', 'Ç¼'=>'ae', 'Ç½'=>'ae',
			'Ð±'=>'b', '×'=>'b', 'Ð'=>'b', 'Ã¾'=>'b',
			'Ä'=>'c', 'Ä'=>'c', 'Ä'=>'c', 'Ä'=>'c', 'Ã§'=>'c', 'Ñ'=>'c', '×¦'=>'c', 'Ä'=>'c', 'Ð¦'=>'c', 'Ä'=>'c', 'Ä'=>'c', 'Ð§'=>'ch', 'Ñ'=>'ch',
			'×'=>'d', 'Ä'=>'d', 'Ä'=>'d', 'Ä'=>'d', 'Ä'=>'d', 'Ð´'=>'d', 'Ð'=>'d', 'Ã°'=>'d',
			'Ñ'=>'e', '×¢'=>'e', 'Ðµ'=>'e', 'Ð'=>'e', 'Æ'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ä'=>'e', 'Ð'=>'e', 'Ä'=>'e', 'Ãª'=>'e', 'É'=>'e', 'Ã¨'=>'e', 'Ã«'=>'e', 'Ã©'=>'e',
			'Ñ'=>'f', 'Æ'=>'f', 'Ð¤'=>'f',
			'Ä¡'=>'g', 'Ä¢'=>'g', 'Ä '=>'g', 'Ä'=>'g', 'Ð'=>'g', 'Ð³'=>'g', 'Ä'=>'g', 'Ä'=>'g', '×'=>'g', 'Ò'=>'g', 'Ò'=>'g', 'Ä£'=>'g',
			'×'=>'h', 'Ä§'=>'h', 'Ð¥'=>'h', 'Ä¦'=>'h', 'Ä¤'=>'h', 'Ä¥'=>'h', 'Ñ'=>'h', '×'=>'h',
			'Ã®'=>'i', 'Ã¯'=>'i', 'Ã­'=>'i', 'Ã¬'=>'i', 'Ä¯'=>'i', 'Ä­'=>'i', 'Ä±'=>'i', 'Ä¬'=>'i', 'Ð'=>'i', 'Ä©'=>'i', 'Ç'=>'i', 'Ä¨'=>'i', 'Ç'=>'i', 'Ð¸'=>'i', 'Ä®'=>'i', '×'=>'i', 'Ð'=>'i', 'Äª'=>'i', 'Ð'=>'i', 'Ñ'=>'i', 'Ñ'=>'i', 'Ä«'=>'i', 'Ä³'=>'ij', 'Ä²'=>'ij',
			'Ð¹'=>'j', 'Ð'=>'j', 'Ä´'=>'j', 'Äµ'=>'j', 'Ñ'=>'ja', 'Ð¯'=>'ja', 'Ð­'=>'je', 'Ñ'=>'je', 'Ñ'=>'jo', 'Ð'=>'jo', 'Ñ'=>'ju', 'Ð®'=>'ju',
			'Ä¸'=>'k', '×'=>'k', 'Ä¶'=>'k', 'Ð'=>'k', 'Ðº'=>'k', 'Ä·'=>'k', '×'=>'k',
			'Ä¿'=>'l', 'Å'=>'l', 'Ð'=>'l', 'Å'=>'l', 'Ä¼'=>'l', 'Äº'=>'l', 'Ä¹'=>'l', 'Ä»'=>'l', 'Ð»'=>'l', 'Ä½'=>'l', 'Ä¾'=>'l', '×'=>'l',
			'×'=>'m', 'Ð'=>'m', '×'=>'m', 'Ð¼'=>'m',
			'Ã±'=>'n', 'Ð½'=>'n', 'Å'=>'n', '×'=>'n', 'Å'=>'n', '× '=>'n', 'Ð'=>'n', 'Å'=>'n', 'Å'=>'n', 'Å'=>'n', 'Å'=>'n', 'Å'=>'n', 'Å'=>'n',
			'Ð¾'=>'o', 'Ð'=>'o', 'Å'=>'o', 'Ãµ'=>'o', 'Ã´'=>'o', 'Å'=>'o', 'Å'=>'o', 'Å'=>'o', 'Å'=>'o', 'Å'=>'o', 'Ã¸'=>'o', 'Ç¿'=>'o', 'Ç'=>'o', 'Ã²'=>'o', 'Ç¾'=>'o', 'Ç'=>'o', 'Æ¡'=>'o', 'Ã³'=>'o', 'Æ '=>'o', 'Å'=>'oe', 'Å'=>'oe', 'Ã¶'=>'oe',
			'×¤'=>'p', '×£'=>'p', 'Ð¿'=>'p', 'Ð'=>'p',
			'×§'=>'q',
			'Å'=>'r', 'Å'=>'r', 'Å'=>'r', 'Å'=>'r', 'Å'=>'r', '×¨'=>'r', 'Å'=>'r', 'Ð '=>'r', 'Ñ'=>'r',
			'È'=>'s', 'Ñ'=>'s', 'Å'=>'s', 'Å¡'=>'s', 'Å'=>'s', '×¡'=>'s', 'Å'=>'s', 'Ð¡'=>'s', 'Å'=>'s', 'Ð©'=>'sch', 'Ñ'=>'sch', 'Ñ'=>'sh', 'Ð¨'=>'sh', 'Ã'=>'ss',
			'Ñ'=>'t', '×'=>'t', 'Å§'=>'t', '×ª'=>'t', 'Å¥'=>'t', 'Å£'=>'t', 'Å¢'=>'t', 'Ð¢'=>'t', 'È'=>'t', 'Å¦'=>'t', 'Å¤'=>'t', 'â¢'=>'tm',
			'Å«'=>'u', 'Ñ'=>'u', 'Å¨'=>'u', 'Å©'=>'u', 'Æ¯'=>'u', 'Æ°'=>'u', 'Åª'=>'u', 'Ç'=>'u', 'Å³'=>'u', 'Å²'=>'u', 'Å­'=>'u', 'Å¬'=>'u', 'Å®'=>'u', 'Å¯'=>'u', 'Å±'=>'u', 'Å°'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ã¹'=>'u', 'Ãº'=>'u', 'Ã»'=>'u', 'Ð£'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ç'=>'u', 'Ã¼'=>'ue',
			'Ð²'=>'v', '×'=>'v', 'Ð'=>'v',
			'×©'=>'w', 'Åµ'=>'w', 'Å´'=>'w',
			'Ñ'=>'y', 'Å·'=>'y', 'Ã½'=>'y', 'Ã¿'=>'y', 'Å¸'=>'y', 'Å¶'=>'y',
			'Ð«'=>'y', 'Å¾'=>'z', 'Ð'=>'z', 'Ð·'=>'z', 'Åº'=>'z', '×'=>'z', 'Å¼'=>'z', 'Å¿'=>'z', 'Ð'=>'zh', 'Ð¶'=>'zh'
		);
    return strtr($string, $replace);
	}
	
	
	function replace ($string) {
		$_convertTable = array(
			'&amp;' => 'and',   '@' => 'at',    'Â©' => 'c', 'Â®' => 'r', 'Ã' => 'a',
			'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'a', 'Ã' => 'ae','Ã' => 'c',
			'Ã' => 'e', 'Ã' => 'e', 'Ã' => 'e', 'Ã' => 'i', 'Ã' => 'i', 'Ã' => 'i',
			'Ã' => 'i', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o', 'Ã' => 'o',
			'Ã' => 'o', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'u', 'Ã' => 'y',
			'Ã' => 'ss','Ã ' => 'a', 'Ã¡' => 'a', 'Ã¢' => 'a', 'Ã¤' => 'a', 'Ã¥' => 'a',
			'Ã¦' => 'ae','Ã§' => 'c', 'Ã¨' => 'e', 'Ã©' => 'e', 'Ãª' => 'e', 'Ã«' => 'e',
			'Ã¬' => 'i', 'Ã­' => 'i', 'Ã®' => 'i', 'Ã¯' => 'i', 'Ã²' => 'o', 'Ã³' => 'o',
			'Ã´' => 'o', 'Ãµ' => 'o', 'Ã¶' => 'o', 'Ã¸' => 'o', 'Ã¹' => 'u', 'Ãº' => 'u',
			'Ã»' => 'u', 'Ã¼' => 'u', 'Ã½' => 'y', 'Ã¾' => 'p', 'Ã¿' => 'y', 'Ä' => 'a',
			'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'a', 'Ä' => 'c',
			'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c', 'Ä' => 'c',
			'Ä' => 'c', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'd', 'Ä' => 'e',
			'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e',
			'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'e', 'Ä' => 'g', 'Ä' => 'g', 'Ä' => 'g',
			'Ä' => 'g', 'Ä ' => 'g', 'Ä¡' => 'g', 'Ä¢' => 'g', 'Ä£' => 'g', 'Ä¤' => 'h',
			'Ä¥' => 'h', 'Ä¦' => 'h', 'Ä§' => 'h', 'Ä¨' => 'i', 'Ä©' => 'i', 'Äª' => 'i',
			'Ä«' => 'i', 'Ä¬' => 'i', 'Ä­' => 'i', 'Ä®' => 'i', 'Ä¯' => 'i', 'Ä°' => 'i',
			'Ä±' => 'i', 'Ä²' => 'ij','Ä³' => 'ij','Ä´' => 'j', 'Äµ' => 'j', 'Ä¶' => 'k',
			'Ä·' => 'k', 'Ä¸' => 'k', 'Ä¹' => 'l', 'Äº' => 'l', 'Ä»' => 'l', 'Ä¼' => 'l',
			'Ä½' => 'l', 'Ä¾' => 'l', 'Ä¿' => 'l', 'Å' => 'l', 'Å' => 'l', 'Å' => 'l',
			'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'n',
			'Å' => 'n', 'Å' => 'n', 'Å' => 'n', 'Å' => 'o', 'Å' => 'o', 'Å' => 'o',
			'Å' => 'o', 'Å' => 'o', 'Å' => 'o', 'Å' => 'oe','Å' => 'oe','Å' => 'r',
			'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 'r', 'Å' => 's',
			'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å' => 's', 'Å ' => 's',
			'Å¡' => 's', 'Å¢' => 't', 'Å£' => 't', 'Å¤' => 't', 'Å¥' => 't', 'Å¦' => 't',
			'Å§' => 't', 'Å¨' => 'u', 'Å©' => 'u', 'Åª' => 'u', 'Å«' => 'u', 'Å¬' => 'u',
			'Å­' => 'u', 'Å®' => 'u', 'Å¯' => 'u', 'Å°' => 'u', 'Å±' => 'u', 'Å²' => 'u',
			'Å³' => 'u', 'Å´' => 'w', 'Åµ' => 'w', 'Å¶' => 'y', 'Å·' => 'y', 'Å¸' => 'y',
			'Å¹' => 'z', 'Åº' => 'z', 'Å»' => 'z', 'Å¼' => 'z', 'Å½' => 'z', 'Å¾' => 'z',
			'Å¿' => 'z', 'Æ' => 'e', 'Æ' => 'f', 'Æ ' => 'o', 'Æ¡' => 'o', 'Æ¯' => 'u',
			'Æ°' => 'u', 'Ç' => 'a', 'Ç' => 'a', 'Ç' => 'i', 'Ç' => 'i', 'Ç' => 'o',
			'Ç' => 'o', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u',
			'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Ç' => 'u', 'Çº' => 'a',
			'Ç»' => 'a', 'Ç¼' => 'ae','Ç½' => 'ae','Ç¾' => 'o', 'Ç¿' => 'o', 'É' => 'e',
			'Ð' => 'jo','Ð' => 'e', 'Ð' => 'i', 'Ð' => 'i', 'Ð' => 'a', 'Ð' => 'b',
			'Ð' => 'v', 'Ð' => 'g', 'Ð' => 'd', 'Ð' => 'e', 'Ð' => 'zh','Ð' => 'z',
			'Ð' => 'i', 'Ð' => 'j', 'Ð' => 'k', 'Ð' => 'l', 'Ð' => 'm', 'Ð' => 'n',
			'Ð' => 'o', 'Ð' => 'p', 'Ð ' => 'r', 'Ð¡' => 's', 'Ð¢' => 't', 'Ð£' => 'u',
			'Ð¤' => 'f', 'Ð¥' => 'h', 'Ð¦' => 'c', 'Ð§' => 'ch','Ð¨' => 'sh','Ð©' => 'sch',
			'Ðª' => '-', 'Ð«' => 'y', 'Ð¬' => '-', 'Ð­' => 'je','Ð®' => 'ju','Ð¯' => 'ja',
			'Ð°' => 'a', 'Ð±' => 'b', 'Ð²' => 'v', 'Ð³' => 'g', 'Ð´' => 'd', 'Ðµ' => 'e',
			'Ð¶' => 'zh','Ð·' => 'z', 'Ð¸' => 'i', 'Ð¹' => 'j', 'Ðº' => 'k', 'Ð»' => 'l',
			'Ð¼' => 'm', 'Ð½' => 'n', 'Ð¾' => 'o', 'Ð¿' => 'p', 'Ñ' => 'r', 'Ñ' => 's',
			'Ñ' => 't', 'Ñ' => 'u', 'Ñ' => 'f', 'Ñ' => 'h', 'Ñ' => 'c', 'Ñ' => 'ch',
			'Ñ' => 'sh','Ñ' => 'sch','Ñ' => '-','Ñ' => 'y', 'Ñ' => '-', 'Ñ' => 'je',
			'Ñ' => 'ju','Ñ' => 'ja','Ñ' => 'jo','Ñ' => 'e', 'Ñ' => 'i', 'Ñ' => 'i',
			'Ò' => 'g', 'Ò' => 'g', '×' => 'a', '×' => 'b', '×' => 'g', '×' => 'd',
'×' => 'h', '×' => 'v', '×' => 'z', '×' => 'h', '×' => 't', '×' => 'i',
'×' => 'k', '×' => 'k', '×' => 'l', '×' => 'm', '×' => 'm', '×' => 'n',
'× ' => 'n', '×¡' => 's', '×¢' => 'e', '×£' => 'p', '×¤' => 'p', '×¥' => 'C',
'×¦' => 'c', '×§' => 'q', '×¨' => 'r', '×©' => 'w', '×ª' => 't', 'â¢' => 'tm',
		);
		return strtr($string, $_convertTable);
	}
	
	

?>